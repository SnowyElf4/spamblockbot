import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData

# Токен бота
API_TOKEN = 'ВАШТОКЕНБОТА'
chat_id = 'ВАШАККАУНТID'

# Создание экземпляров бота и диспетчера
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Определение состояний
class UserState(StatesGroup):
    name = State()

# Определение CallbackData
class ButtonCallback(CallbackData, prefix="action"):
    action: str  # Действие, которое нужно обработать

@dp.message(Command("start"))
async def send_hello(message: Message, state: FSMContext):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="СпамБлок", callback_data=ButtonCallback(action="spamblock").pack())],
        [InlineKeyboardButton(text="Написать сообщение", callback_data=ButtonCallback(action="sms").pack())]
    ])
    sent_message = await message.answer(
        "<b>Привет! Если у тебя <u>СпамБлок</u>. \n\n- - Нажимай на кнопки ниже, и свяжись со мной.</b>",
        parse_mode="HTML",
        reply_markup=markup
    )
    # Сохраняем отправленное сообщение в состоянии (для редактирования)
    await state.update_data(sent_message_id=sent_message.message_id)

@dp.callback_query(ButtonCallback.filter())
async def handle_callbacks(call: CallbackQuery, callback_data: ButtonCallback, state: FSMContext):
    if callback_data.action == "sms":
        cancel_button = InlineKeyboardButton(text="Отмена", callback_data=ButtonCallback(action="cancel").pack())
        markup = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])
        await call.message.edit_text(
            "<b>Напиши сообщение, которое ты желаешь отправить:</b>",
            parse_mode="HTML",
            reply_markup=markup
        )
        await state.set_state(UserState.name)
    elif callback_data.action == "cancel":
        await call.message.edit_text("Отправка сообщения отменена.", parse_mode="HTML")
        await state.clear()
    elif callback_data.action == "spamblock":
        usname = call.from_user.username or f"ID: {call.from_user.id}"
        await bot.send_message(
            chat_id=chat_id,
            text=f"У пользователя @{usname} <u>спамблок!</u>",
            parse_mode="HTML"
        )
        await call.message.edit_text(
            "Я дал знать о твоём <u>спамблоке</u>! \n\nТак же ты можешь дать знать, что ты конкретно хочешь заранее, написав сообщение благодаря кнопке в меню.",
            parse_mode="HTML"
        )

@dp.message(UserState.name)
async def get_username(message: Message, state: FSMContext):
    if message.text.lower() == "отмена":
        await message.edit_text("Отменено.", parse_mode="HTML")
        await state.clear()
    else:
        usname = message.from_user.username or f"ID: {message.from_user.id}"
        await bot.send_message(
            chat_id=chat_id,
            text=f"Сообщение пользователя: @{usname}\n\n{message.text}",
            parse_mode="HTML"
        )
        await state.clear()
        await message.edit_text("<b>Сообщение отправлено.</b>", parse_mode="HTML")

async def main():
    print("Бот запущен!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
